# Cocktail Finder App - Generation Prompt
# Generated by Copilot

## Project Overview
Create a responsive React web application called "Cocktail Finder" that helps users discover cocktail recipes based on available ingredients. The app should have a clean, Apple-inspired UI design and provide an intuitive, pleasant user experience.

## Coding Standards
1. Add a comment: 'Generated by Copilot' at the top of every generated file
2. In TypeScript always use underscore prefix for private field names
3. Follow React best practices and functional component patterns
4. Use styled-components for styling
5. Implement proper TypeScript typing throughout the project

## Core Features

### 1. Unified Search Interface
- Create a single search field that can search for both ingredients and cocktails
- Implement fuzzy search functionality using Fuse.js
- Show search results categorized by type (ingredient/cocktail)
- Allow clicking on search results to select ingredients or cocktails

### 2. Ingredient Selection
- Allow users to select multiple ingredients
- Display selected ingredients as removable tags
- Implement an AND logic for filtering (show only cocktails containing ALL selected ingredients)
- Provide a reset button to clear all selections

### 3. Custom Search Terms
- Allow users to add any text as a custom search term by typing and pressing Enter
- Add these custom terms to the selected ingredients list

### 4. Cocktail Cards
- Display filtered cocktails as visually appealing cards
- Include cocktail name, ingredients, and an option to show/hide the recipe
- Implement a toggle for recipe visibility
- Add subtle animations for good UX

### 5. Data Source Management
- Allow users to add custom data sources via URL input
- Display a list of current data sources with remove options
- Include default data sources but make them removable
- Implement proper error handling for URL loading

### 6. Responsive Design
- Create a layout that works well on mobile, tablet, and desktop
- Use flexible styling with appropriate breakpoints
- Ensure all features work across different device sizes

## Project Structure
Set up the project with the following structure:

```
src/
  components/
    cocktail/
      CocktailCard.tsx - Individual cocktail display with recipe toggle
      CocktailList.tsx - List of filtered cocktails
      IngredientSelector.tsx - Component for selecting ingredients
      SourceManagement.tsx - UI for managing data sources
      UnifiedSearch.tsx - Combined search interface for ingredients/cocktails
    ui/
      SearchBar.tsx - Reusable search input component
      StyledComponents.tsx - Shared styled components
  context/
    CocktailContext.tsx - Global state management
  hooks/
    useFuzzySearch.ts - Custom hook for fuzzy search functionality
  services/
    cocktailService.ts - Data fetching and processing
  types/
    cocktail.ts - TypeScript interfaces
  App.tsx - Main application component
  index.tsx - Application entry point
```

## Default Data Sources
Use these default cocktail data sources:
1. https://gist.githubusercontent.com/xbalajipge/4796ada45a4fa81516356e9e1ac7bc7b/raw/8a74eb12fc01fa2501d6516a4c8b3e66a6fad7e2/uniq-cocktails-00-80.json
2. https://gist.githubusercontent.com/xbalajipge/c682bd1ad13d575469c5fde89b87e411/raw/8cbd6973c1ab2940284a60056b097df07979ac68/uniq-cocktails-81-163.json

## Deployment Configuration
Set up the project for GitHub Pages deployment:
- Configure "homepage" field in package.json: "https://xlabsinc.github.io/cocktails"
- Add gh-pages dependency
- Include deploy scripts in package.json
- Create a build-and-deploy.sh script for easy deployment

## Key Implementation Details

### State Management
- Use React Context API for global state management
- Store and manage:
  - All available ingredients list
  - Selected ingredients
  - Cocktail data
  - Active data sources
  - Search state

### Cocktail Filtering
- Implement AND logic for ingredient filtering
- Filter cocktails that contain ALL selected ingredients
- Allow searching by cocktail name in addition to ingredients
- When a cocktail is selected in search, automatically select all its ingredients

### Search Experience
- Real-time search results as user types
- Allow adding custom search terms via Enter key
- Show dropdown with categorized results (ingredients vs. cocktails)
- Clear search field after selection

### UI/UX Requirements
- Clean, minimal interface with Apple-style design cues
- Card-based layout for cocktails
- Proper loading states and error handling
- Subtle animations for interactions
- High contrast text for readability
- Mobile-friendly touch targets

## Development Environment
- Create React App with TypeScript template
- Node.js 14+ environment
- ESLint and Prettier for code quality

## Additional Requirements
- Implement proper error handling for data loading
- Add basic unit tests for key components
- Include responsive viewport meta tag
- Configure GitHub Actions for deployment
- Add detailed README with usage instructions