// Generated by Copilot
import React, { useState, useMemo } from 'react';
import { useCocktail } from '../../context/CocktailContext';
import { useFuzzySearch } from '../../hooks/useFuzzySearch';
import { Card, Section, Title, IngredientTag, Button, ButtonGroup } from '../ui/StyledComponents';
import SearchBar from '../ui/SearchBar';

const IngredientSelector: React.FC = () => {
  const { allIngredients, selectedIngredients, toggleIngredient, resetSelections } = useCocktail();
  const [searchTerm, setSearchTerm] = useState('');
  
  // Use fuzzy search for ingredients
  const { results: filteredIngredients } = useFuzzySearch({
    items: allIngredients,
    keys: [''],  // Search the string itself
    threshold: 0.3,
  });
  
  // Filter ingredients based on search term
  const displayedIngredients = useMemo(() => {
    if (!searchTerm) return [];
    return filteredIngredients.filter(ingredient => 
      ingredient.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [filteredIngredients, searchTerm]);

  const handleIngredientSelect = (ingredient: string) => {
    toggleIngredient(ingredient);
    setSearchTerm('');
  };

  // Get all selected ingredients
  const selectedIngredientsList = useMemo(() => 
    Object.entries(selectedIngredients)
      .filter(([_, isSelected]) => isSelected)
      .map(([ingredient]) => ingredient),
    [selectedIngredients]
  );

  return (
    <Card>
      <Section>
        <Title style={{ fontSize: '1.5rem' }}>Select Ingredients</Title>
        <p>Search for ingredients and click to select them</p>
        
        <div style={{ marginBottom: '20px' }}>
          <SearchBar
            items={displayedIngredients}
            onSelect={handleIngredientSelect}
            getItemLabel={(item) => item}
            placeholder="Search for ingredients..."
            onSearch={setSearchTerm}
          />
        </div>

        {selectedIngredientsList.length > 0 && (
          <>
            <div style={{ margin: '20px 0' }}>
              <h3>Selected Ingredients:</h3>
              <div>
                {selectedIngredientsList.map((ingredient) => (
                  <IngredientTag 
                    key={ingredient}
                    active={true}
                    onClick={() => toggleIngredient(ingredient)}
                  >
                    {ingredient} âœ•
                  </IngredientTag>
                ))}
              </div>
            </div>
            
            <ButtonGroup>
              <Button onClick={resetSelections}>Reset Selection</Button>
            </ButtonGroup>
          </>
        )}
      </Section>
    </Card>
  );
};

export default IngredientSelector;