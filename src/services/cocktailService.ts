// Generated by Copilot
import axios from 'axios';
import { Cocktail } from '../types/cocktail';

export const DEFAULT_COCKTAIL_URLS = [
  'https://gist.githubusercontent.com/xbalajipge/4796ada45a4fa81516356e9e1ac7bc7b/raw/8a74eb12fc01fa2501d6516a4c8b3e66a6fad7e2/uniq-cocktails-00-80.json',
  'https://gist.githubusercontent.com/xbalajipge/c682bd1ad13d575469c5fde89b87e411/raw/8cbd6973c1ab2940284a60056b097df07979ac68/uniq-cocktails-81-163.json'
];

export class CocktailService {
  private static _instance: CocktailService;
  private _cache: Map<string, Cocktail[]> = new Map();

  private constructor() {}

  public static getInstance(): CocktailService {
    if (!CocktailService._instance) {
      CocktailService._instance = new CocktailService();
    }
    return CocktailService._instance;
  }

  public async fetchCocktails(url: string): Promise<Cocktail[]> {
    try {
      // Check if we have cached results
      if (this._cache.has(url)) {
        return this._cache.get(url) || [];
      }

      const response = await axios.get(url);
      const cocktails = response.data;
      
      // Cache the results
      this._cache.set(url, cocktails);
      
      return cocktails;
    } catch (error) {
      console.error(`Error fetching cocktails from ${url}:`, error);
      return [];
    }
  }

  public async fetchAllCocktails(urls: string[]): Promise<Cocktail[]> {
    try {
      const cocktailArrays = await Promise.all(
        urls.map(url => this.fetchCocktails(url))
      );
      
      // Flatten the array of arrays into a single array
      return cocktailArrays.flat();
    } catch (error) {
      console.error('Error fetching all cocktails:', error);
      return [];
    }
  }
}