// Generated by Copilot
import { useState, useMemo } from 'react';
import Fuse from 'fuse.js';

export interface FuzzySearchOptions<T> {
  keys: Array<keyof T | string>;
  threshold?: number;
  items: T[];
}

export function useFuzzySearch<T>({ keys, threshold = 0.4, items }: FuzzySearchOptions<T>) {
  const [searchTerm, setSearchTerm] = useState('');
  
  const fuse = useMemo(() => {
    // Convert keys to strings to satisfy FuseJS typing
    const fuseKeys = keys.map(key => String(key));
    
    return new Fuse(items, {
      keys: fuseKeys,
      threshold,
      ignoreLocation: true,
      shouldSort: true,
    });
  }, [items, keys, threshold]);
  
  const results = useMemo(() => {
    if (!searchTerm.trim()) return items;
    return fuse.search(searchTerm).map(result => result.item);
  }, [fuse, searchTerm, items]);
  
  return {
    searchTerm,
    setSearchTerm,
    results,
  };
}